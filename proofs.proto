option java_outer_classname = "Serialization";
option java_package = "edu.rice.historytree.generated";

// A configuration message for an aggregator. An aggobj generates a config blob, which 
// is placed in this message along with its name.

/*
message AggConfig {
  required string name = 1;
  optional bytes configblob =2;
 }

message Config {
  required AggConfig aggconfig = 1;
  required string valtype = 2;
}
*/


// For serializing a pruned tree. 
message HistNode {
     optional HistNode left = 1;
     optional HistNode right = 2;
 
     // Leaves must include either a value or an agg.
     // Interior non-frozen never include a value or agg.
     // Interior non-stubs never include a value or an agg.
     // Interior frozen stubs include an agg.
     optional bytes val = 3;
     optional bytes agg = 4;
}

message PrunedTree {
     optional int32 version = 1; // Optional for merkle tree, required for the history tree
     required HistNode root = 2; // Root node.
}


/* What is the type of the tree in the signature?
   Its either Merkle or History.
*/

enum SigTreeType {MESSAGE = 1; HISTORY_TREE = 2;  MERKLE_TREE = 3; };

/* What is the type of proof blob that we have? At present, a merkle tree, history tree (containing a proof of ONE blob), or a single message.
*/

enum SignatureType {SINGLE_MESSAGE = 1;
                    SINGLE_HISTORY_TREE = 2;  
                    SINGLE_MERKLE_TREE = 3; 
};


// What is signed. (but is not sent)
message TreeSigMessage {
     required SigTreeType treetype = 1;
     optional int32 version = 3;
     optional bytes roothash = 4;  // Or datahash
}

// What is sent.
message TreeSigBlob {
  // Overall type of this signature.
   required SignatureType signature_type = 5;

  // Borrowed from ProtocolSignature (google wave) for the low-level signature.
  // Indicate how the 'TreeSigMessage' is signed.
  enum SignatureAlgorithm {
    UNKNOWN = 1; // Illegal
    TEST_DIGEST = 2;
    SHA1_RSA = 3;
    SHA1_DSA = 4;
  }

  optional bytes signature_bytes = 1;
  optional bytes signer_id = 2;
  required SignatureAlgorithm signature_algorithm = 3 [default = UNKNOWN];

  // Stuff set by bundled signatures.

   optional PrunedTree tree = 6;
   optional int32 leaf = 4; //Point out specific leafs.

   // For a history tree, used to demultiplex
   optional sfixed64 tree_id = 16;
   repeated int32 splice_hint = 17;
}

// Denotes a message data being signed.
message MessageData {
   required bytes message =1;
}



////////////////
////////////////   Stream signature design.
////////////////

/*
message StreamBundle {
   repeated int32 splicepoints=2; // Includes the end of the last epoch.
   required Commitment commitment=3;
   required bytes signature = 4;
}

// Represents a signature over a single version.
message SigBlob {
   repeated int32 messageversion = 1;
   required Commitment commitment = 2;
}
*/
